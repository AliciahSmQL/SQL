# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then, I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

#Exploring the data
SELECT * 
FROM BIT_DB.Spotifydata; 

#What is the average danceability by artist and track? 
SELECT artist_name, track_name, avg(danceability)
FROM BIT_DB.spotifydata
GROUP BY artist_name, track_name;

#Who are the top 10 artists based on popularity? 
SELECT artist_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity desc
LIMIT 10;

#What artist released the longest song? 
SELECT artist_name
FROM BIT_DB.Spotifydata
ORDER BY duration_ms desc
LIMIT 1;

 #What's the average danceability for the 10 most popular songs? [*(using CTE)*]
With avg_danceability_cte as 
(SELECT s.artist_name, avg(s.danceability) dance, s.popularity
FROM Spotifydata s 
GROUP BY s.artist_name, popularity)

SELECT artist_name, dance, popularity 
FROM avg_danceability_cte
ORDER BY popularity desc; 

#List all the songs written by an Olivia.
SELECT track_name
FROM BIT_DB.Spotifydata
WHERE artist_name like '%Olivia%'; 

#What are the top 5 songs with the highest energy?
SELECT track_name, energy 
FROM BIT_DB.Spotifydata
ORDER BY energy desc
LIMIT 5; 

#Which songs have a 3/4 time signature?
SELECT track_name
FROM BIT_DB.Spotifydata
WHERE time_signature = 3; 

#Which song came in last on the chart according to popularity?
SELECT track_name 
FROM BIT_DB.Spotifydata
ORDER BY popularity
LIMIT 1; 
